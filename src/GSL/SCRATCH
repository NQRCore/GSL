
Suppose you have a C library and the associate shared object file,
such as libRmath.so from the R Project (www.r-project.org).  The
library contains a bunch of useful functions, one being rexp() for
generating a pseudo-random value from the exponential distribution.
It takes and returns a double.

If you are building a HLL and want to use rexp(), you can do
something like this in Runtime.pm:

sub rexp(*@args) {
    return Q:PIR {
        .local num arg, ans
        $P0 = find_lex '@args'
        arg = $P0[0]
        .local pmc libRmath, rexp
        libRmath = loadlib 'libRmath'
        if libRmath goto HAVELIBRARY
        say 'Could not load the libRmath library'
      HAVELIBRARY:
        rexp = dlfunc libRmath, 'rexp', 'dd'
        ans = rexp(arg)
        %r = box ans
    };
}

For this to work, your libRmath.so file will need to be found
in a reasonable place (perhaps because you set your LD_LIBRARY_PATH
environment variable).

Of course, there are many similar functions the library you would
like to use, which brings up several issues:

(1) It seems inefficient to have to use loadlib repeatedly; can this
be done once at runtime?

(2) It seems inefficient to have to call dlfunc every time rexp() is
used; can this be done once at runtime?

(3) This function has a simple signature receiving and returning a
double. A more complex function could very likely fail to run, or
even build, with a message complaining about the 'thunk' -- essentially
not finding a match for the more complicated signature (not all
signatures are automatically supported).

(4) It would be nice to have a simpler version of the example in 
completely in NQP instead of PIR.

There seem to be two directions addressing some or all of these
issues.  First, libffi can be used to sort out unusual signatures.
Second, the parrot_nci_thunk_gen utility can be used as part of a
configuration (pre-build) process.  The former is probably a little
easier, initially, while the latter may represent the 'best practices'
solution.  We explore each, below.


-- Using libffi?

Can probably figure this out, check bubaflub's GMP and probably others.


-- Using parrot_nci_thunk_gen and/or nci_thunk_gen.pir?

Comments from bubaflub and plobsing seem too vague for me to attempt
this at the moment, unless there is an example of someone actually
doing this?  Everything in the parrot tree seems to be simply creating
this utility, not using it in a helpful way?

tools/dev/nci_thunk_gen.pir














Important stuff: function calls, nci

$ nm libparrot.so|grep dlfunc
0000000000140400 t _Z21Parrot_dlfunc_p_p_s_pPlP15parrot_interp_t
000000000013f610 t _Z21Parrot_dlfunc_p_p_s_sPlP15parrot_interp_t
000000000013fd00 t _Z22Parrot_dlfunc_p_p_s_scPlP15parrot_interp_t
0000000000140770 t _Z22Parrot_dlfunc_p_p_sc_pPlP15parrot_interp_t
000000000013f980 t _Z22Parrot_dlfunc_p_p_sc_sPlP15parrot_interp_t
0000000000140080 t _Z23Parrot_dlfunc_p_p_sc_scPlP15parrot_interp_t



 jay: have a look at this: https://github.com/letolabs/parrot-libgit2/blob/master/src/git2.pir
<dukeleto> jay: that is actually generated code, from the tools/dev/ncidef2pir.pl tool
<soh_cah_toa> i thought the syntax in nqp was pir::foo__PPPS()?
<soh_cah_toa> or maybe i'm thinking of something else
<dukeleto> jay: yes, it is a double underscore
<jay> soh_cah_toa++   !   Compiled.
<soh_cah_toa> first one is return type, the rest are args
<soh_cah_toa> yay me
<dukeleto> jay: and args+function return are mostly lowercase. 
<soh_cah_toa> actually, i don't know the difference between the uppercase/lowercase variants
<jay> I used upper here.  Is lower preferred?
<dukeleto> jay: they mean slightly different things
* jsut has quit (Ping timeout: 360 seconds)
<dukeleto> jay: which I can't remember, nor where they are documented :(
<dukeleto> jay: parrots function signatures are documented a bit in docs/embed.pod
* fperrad (~chatzilla@AToulon-552-1-66-107.w90-37.abo.wanadoo.fr) has joined #parrot
* slavorg gives channel operator status to fperrad
<soh_cah_toa> yes, that's where it is
<soh_cah_toa> also docs/embed_new.pod
<dukeleto> jay: this https://github.com/letolabs/parrot-libgit2/blob/master/src/git2.nci is a file which describes external library functions arguments and return values, and then a script generates the PIR I showed you above
<cotto> dukeleto, https://github.com/parrot/parrot/blob/master/compilers/pct/src/PAST/Compiler.pir
<dukeleto> jay: if you have dozens or hundres of functions, it really shines
<bubaflub> dukeleto: amen.


# bubaflub
 Suppose I have a lot of dlfuncs all coming from the same library... can I do a loadlib once and put the resulting library "handle" or whatever it is into a global?
<bubaflub> jay: https://github.com/bubaflub/parrot-gmp/blob/master/src/GMP/raw.pir
<jay> bubaflub++  Same link as last night but I was looking at something else there I think.  Thanks!
<bubaflub> jay: ok.  this is in PIR and is generated from a script in parrot under tools/dev/ncidef2pir.pl
<bubaflub> jay: i have a NCI definition file (https://github.com/bubaflub/parrot-gmp/blob/master/src/GMP/raw.nci) and the script outputs the PIR.  pretty simple but saves me some time

jay: that's exactly what my project is doing - i've got a script that reads gmp.h and generates the NCI definition.  from there we've got a script in parrot that goes from NCI def -> PIR.
<bubaflub> jay: each header file is slightly different and GMP had a bunch of #define's i had to work around, but you could probably take my script and modify it to work with GSL


 what you really need is an NCI thunk to provide the Parrot/C interface for the call you are trying to make
<plobsing> you can do that by compiling Parrot with libffi, providing a dynamic thunk library, or rebuilding parrot with additional core thunks.

jay: basically, not every possible combination of signatures is currently covered.  either generate a thunk (using parrot_nci_thunk_gen) or use libffi.

jay: in other news, GSL also has the same documentation format (textinfo) so there is a change that the scripts i use for GMP will work with minimal convers


https://github.com/bubaflub/parrot-gmp/blob/master/src/GMP/raw.pir

compilers/pct/src/PAST/Compiler.pir

plobsing: while you're here - is there an example of somewhere that uses parrot_nci_thunk_gen and loads in those libraries?
<bubaflub> s/libraries/thunks/g

/usr/local/bin/parrot_nci_thunk_gen
config/gen/makefile/root.in  # line 2970

jay: what i understand is that you have a slightly different NCI definition file that contains all your signatures that you'll want.  parrot_nci_thunk_gen turns that nci file into a C file.  compile that C file into a library and then load it when you need it.

and see opengl bindings?
so you'll likely want to look at runtime/parrot/library/OpenGL.pir, and sections of Parrot's makefile concerning 'glut_nci_thunks'

plobsing: ok, i think i get it.  i give it a slightly different NCI definition file, use nci_thunk_gen with --loader-name and generate the C.  compile the C into a library, and then load that library and call whatever function name i specified in --loader-name.

bubaflub: IIRC, there is some magic so that if you do not provide a --loader-name, it picks a special name for the loader and you don't have to call it (parrot calls it automatically as part of the library load)
plobsing: ok.  so maybe just the --dynext param needed then?










